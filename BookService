package library.service;

import library.entity.*;
import library.exception.*;
import library.repository.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class BookService {

	@Autowired
    private BookRepository bookRepository;

    @Autowired
    private UserRepository userRepository;

    public List<Book> findAll() {
        return bookRepository.findAll();
    }
    
    public Book findById(Long id) {
        Book book = bookRepository.findById(id).orElse(null);
        if (book == null) {
            throw new BookNotFoundException("Book not found with ID: " + id);
        }
        return book;
    }
    
    public Book save(Book book) {
        return bookRepository.save(book);
    }
    /*
    public void deleteById(Long id) {
        bookRepository.deleteById(id);
    }

    */   
    public void deleteById(Long id) {
        Book book = findById(id); // Check if book exists before deleting
        if (book.isBorrowed()) {
            throw new BookNotAvailableException("Book is currently borrowed and cannot be deleted");
        }
        bookRepository.deleteById(id);
        displayDeletionConfirmation(id);
    }
    
    private void displayDeletionConfirmation(Long id) {
        System.out.println("Book with ID: " + id + " deleted successfully.");
        
    }
    
    
    public Book borrowBook(Long bookId, Long userId) {
        Book book = findById(bookId);
        User user = userRepository.findById(userId).orElse(null);

        if (book != null && !book.isBorrowed() && user != null) {
            book.setBorrowedBy(user);
            book.setBorrowed(true);
            return save(book);
        }
        // Handle errors (e.g., book not found, book already borrowed, user not found)
        return null;
    }

    public Book returnBook(Long bookId) {
        Book book = findById(bookId);
        if (book != null && book.isBorrowed()) {
            book.setBorrowedBy(null);
            book.setBorrowed(false);
            return save(book);
        }
        // Handle errors (e.g., book not found, book not borrowed)
        return null;
    }
}
