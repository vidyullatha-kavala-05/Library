package library.controller;

import library.entity.*;
import library.service.*;
import library.exception.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;


import java.util.List;

@RestController
@RequestMapping("/api/books")
public class BookController {

	@Autowired
    private BookService bookService;

    @GetMapping
    public List<Book> getAllBooks() {
        return bookService.findAll();
    }
    
    
    @GetMapping("/{bookId}")
    public ResponseEntity<Book> findBookById(@PathVariable Long bookId) {
        try {
            Book book = bookService.findById(bookId); // Try to find the book
            return ResponseEntity.ok(book); // Return the book if found
        } catch (BookNotFoundException ex) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
           
        }
    }
    
    
    @PostMapping
    public Book addBook(@RequestBody Book book) {
        return bookService.save(book);
    }
    
    @PutMapping("/{bookId}")
    public Book updateBook(@PathVariable Long bookId, @RequestBody Book book) {
        // Additional logic to ensure you're updating the correct book
        return bookService.save(book);
    }
    
    
    @DeleteMapping("/{bookId}")
    public ResponseEntity<String> deleteBookById(@PathVariable Long bookId) {
        try {
            bookService.deleteById(bookId); // Attempt to delete the book
            String message = "Book with ID: " + bookId + " deleted successfully.";
            return ResponseEntity.ok(message); // Return success message if successful
        } catch (BookNotAvailableException ex) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Book is currently borrowed and cannot be deleted");
         
        }
    }
    
    @PostMapping("/{bookId}/borrow/{userId}")
    public ResponseEntity<Book> borrowBook(@PathVariable Long bookId, @PathVariable Long userId) {
        Book borrowedBook = bookService.borrowBook(bookId, userId);
        if (borrowedBook != null) {
            return ResponseEntity.ok(borrowedBook);
        } else {
            return ResponseEntity.badRequest().build(); // or a more descriptive error response
        }
    }
    
    @PostMapping("/{bookId}/return")
    public ResponseEntity<Book> returnBook(@PathVariable Long bookId) {
        Book returnedBook = bookService.returnBook(bookId);
        if (returnedBook != null) {
            return ResponseEntity.ok(returnedBook);
        } else {
            return ResponseEntity.badRequest().build(); // or a more descriptive error response
        }
    }

    
    
}

