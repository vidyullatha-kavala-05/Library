package library.controller;

import library.entity.*;
import library.service.*;
import library.exception.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;


import java.util.List;

@RestController
@RequestMapping("/api/users")
public class UserController {

	 @Autowired
	    private UserService userService;

	    @GetMapping
	    public List<User> getAllUsers() {
	        return userService.findAll();
	    }

	    @PostMapping
	    public User addUser(@RequestBody User user) {
	        return userService.save(user);
	    }
	    
	    /*
	    @GetMapping("/{userId}")
	    public User getUser(@PathVariable Long userId) {
	        return userService.findById(userId);
	    }
	    */
	    
	    @GetMapping("/{userId}")
	    public ResponseEntity<?> findUserById(@PathVariable Long userId) {
	        try {
	            User user = userService.findById(userId); // Try to find the user
	            return ResponseEntity.ok(user); // Return the user if found
	        } catch (UserNotFoundException ex) {
	            //return ResponseEntity.notFound().build();
	            // Or you can return a custom error message:
	            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User not found with ID: " + userId);
	        }
	    }
	    
	    @PutMapping("/{userId}")
	    public User updateUser(@PathVariable Long userId, @RequestBody User user) {
	        // Additional logic to ensure you're updating the correct book
	        return userService.save(user);
	    }
	    
	    
	    @DeleteMapping("/{userId}")
	    public ResponseEntity<String> deleteUser(@PathVariable Long userId) {
	    	userService.deleteById(userId);
	    	
	    	String message = "User with ID: " + userId + " deleted successfully.";
	        return ResponseEntity.ok(message);
	    }
	    
	    
	   


}



